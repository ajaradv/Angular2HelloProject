define(["require", "exports", './forms/model', './forms/directives/abstract_control_directive', './forms/directives/control_container', './forms/directives/ng_control_name', './forms/directives/ng_form_control', './forms/directives/ng_model', './forms/directives/ng_control', './forms/directives/ng_control_group', './forms/directives/ng_form_model', './forms/directives/ng_form', './forms/directives/control_value_accessor', './forms/directives/default_value_accessor', './forms/directives/ng_control_status', './forms/directives/checkbox_value_accessor', './forms/directives/select_control_value_accessor', './forms/directives', './forms/validators', './forms/directives/validators', './forms/form_builder', './forms/form_builder', './forms/directives/radio_control_value_accessor', 'angular2/src/facade/lang'], function (require, exports, model_1, abstract_control_directive_1, control_container_1, ng_control_name_1, ng_form_control_1, ng_model_1, ng_control_1, ng_control_group_1, ng_form_model_1, ng_form_1, control_value_accessor_1, default_value_accessor_1, ng_control_status_1, checkbox_value_accessor_1, select_control_value_accessor_1, directives_1, validators_1, validators_2, form_builder_1, form_builder_2, radio_control_value_accessor_1, lang_1) {
    "use strict";
    /**
     * @module
     * @description
     * This module is used for handling user input, by defining and building a {@link ControlGroup} that
     * consists of
     * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
     * to read information
     * from the form DOM elements.
     *
     * This module is not included in the `angular2` module; you must import the forms module
     * explicitly.
     *
     */
    exports.AbstractControl = model_1.AbstractControl;
    exports.Control = model_1.Control;
    exports.ControlGroup = model_1.ControlGroup;
    exports.ControlArray = model_1.ControlArray;
    exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
    exports.ControlContainer = control_container_1.ControlContainer;
    exports.NgControlName = ng_control_name_1.NgControlName;
    exports.NgFormControl = ng_form_control_1.NgFormControl;
    exports.NgModel = ng_model_1.NgModel;
    exports.NgControl = ng_control_1.NgControl;
    exports.NgControlGroup = ng_control_group_1.NgControlGroup;
    exports.NgFormModel = ng_form_model_1.NgFormModel;
    exports.NgForm = ng_form_1.NgForm;
    exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
    exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
    exports.NgControlStatus = ng_control_status_1.NgControlStatus;
    exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
    exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
    exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
    exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
    exports.RadioButtonState = directives_1.RadioButtonState;
    exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
    exports.NG_ASYNC_VALIDATORS = validators_1.NG_ASYNC_VALIDATORS;
    exports.Validators = validators_1.Validators;
    exports.RequiredValidator = validators_2.RequiredValidator;
    exports.MinLengthValidator = validators_2.MinLengthValidator;
    exports.MaxLengthValidator = validators_2.MaxLengthValidator;
    exports.PatternValidator = validators_2.PatternValidator;
    exports.FormBuilder = form_builder_1.FormBuilder;
    /**
     * Shorthand set of providers used for building Angular forms.
     *
     * ### Example
     *
     * ```typescript
     * bootstrap(MyApp, [FORM_PROVIDERS]);
     * ```
     */
    exports.FORM_PROVIDERS = lang_1.CONST_EXPR([form_builder_2.FormBuilder, radio_control_value_accessor_1.RadioControlRegistry]);
    /**
     * See {@link FORM_PROVIDERS} instead.
     *
     * @deprecated
     */
    exports.FORM_BINDINGS = exports.FORM_PROVIDERS;
});
//# sourceMappingURL=forms.js.map