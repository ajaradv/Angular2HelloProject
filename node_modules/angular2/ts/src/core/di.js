/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */
define(["require", "exports", './di/metadata', './di/decorators', './di/forward_ref', './di/injector', './di/provider', './di/key', './di/exceptions', './di/opaque_token'], function (require, exports, metadata_1, decorators_1, forward_ref_1, injector_1, provider_1, key_1, exceptions_1, opaque_token_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    exports.InjectMetadata = metadata_1.InjectMetadata;
    exports.OptionalMetadata = metadata_1.OptionalMetadata;
    exports.InjectableMetadata = metadata_1.InjectableMetadata;
    exports.SelfMetadata = metadata_1.SelfMetadata;
    exports.HostMetadata = metadata_1.HostMetadata;
    exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
    exports.DependencyMetadata = metadata_1.DependencyMetadata;
    // we have to reexport * because Dart and TS export two different sets of types
    __export(decorators_1);
    exports.forwardRef = forward_ref_1.forwardRef;
    exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
    exports.Injector = injector_1.Injector;
    exports.Binding = provider_1.Binding;
    exports.ProviderBuilder = provider_1.ProviderBuilder;
    exports.ResolvedFactory = provider_1.ResolvedFactory;
    exports.Dependency = provider_1.Dependency;
    exports.bind = provider_1.bind;
    exports.Provider = provider_1.Provider;
    exports.provide = provider_1.provide;
    exports.Key = key_1.Key;
    exports.NoProviderError = exceptions_1.NoProviderError;
    exports.AbstractProviderError = exceptions_1.AbstractProviderError;
    exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
    exports.InstantiationError = exceptions_1.InstantiationError;
    exports.InvalidProviderError = exceptions_1.InvalidProviderError;
    exports.NoAnnotationError = exceptions_1.NoAnnotationError;
    exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
    exports.OpaqueToken = opaque_token_1.OpaqueToken;
});
//# sourceMappingURL=di.js.map