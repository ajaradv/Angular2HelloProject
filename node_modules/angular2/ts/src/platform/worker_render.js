var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", 'angular2/src/web_workers/shared/post_message_bus', 'angular2/src/web_workers/shared/message_bus', 'angular2/core', 'angular2/src/core/di', 'angular2/src/platform/worker_render_common', 'angular2/src/facade/exceptions', 'angular2/src/facade/lang'], function (require, exports, post_message_bus_1, message_bus_1, core_1, di_1, worker_render_common_1, exceptions_1, lang_1) {
    "use strict";
    /**
     * Wrapper class that exposes the Worker
     * and underlying {@link MessageBus} for lower level message passing.
     */
    var WebWorkerInstance = (function () {
        function WebWorkerInstance() {
        }
        /** @internal */
        WebWorkerInstance.prototype.init = function (worker, bus) {
            this.worker = worker;
            this.bus = bus;
        };
        WebWorkerInstance = __decorate([
            di_1.Injectable()
        ], WebWorkerInstance);
        return WebWorkerInstance;
    }());
    exports.WebWorkerInstance = WebWorkerInstance;
    /**
     * An array of providers that should be passed into `application()` when initializing a new Worker.
     */
    exports.WORKER_RENDER_APPLICATION = lang_1.CONST_EXPR([
        worker_render_common_1.WORKER_RENDER_APPLICATION_COMMON,
        WebWorkerInstance,
        new di_1.Provider(core_1.APP_INITIALIZER, {
            useFactory: function (injector) { return function () { return initWebWorkerApplication(injector); }; },
            multi: true,
            deps: [di_1.Injector]
        }),
        new di_1.Provider(message_bus_1.MessageBus, { useFactory: function (instance) { return instance.bus; }, deps: [WebWorkerInstance] })
    ]);
    function initWebWorkerApplication(injector) {
        var scriptUri;
        try {
            scriptUri = injector.get(worker_render_common_1.WORKER_SCRIPT);
        }
        catch (e) {
            throw new exceptions_1.BaseException("You must provide your WebWorker's initialization script with the WORKER_SCRIPT token");
        }
        var instance = injector.get(WebWorkerInstance);
        spawnWebWorker(scriptUri, instance);
        worker_render_common_1.initializeGenericWorkerRenderer(injector);
    }
    /**
     * Spawns a new class and initializes the WebWorkerInstance
     */
    function spawnWebWorker(uri, instance) {
        var webWorker = new Worker(uri);
        var sink = new post_message_bus_1.PostMessageBusSink(webWorker);
        var source = new post_message_bus_1.PostMessageBusSource(webWorker);
        var bus = new post_message_bus_1.PostMessageBus(sink, source);
        instance.init(webWorker, bus);
    }
});
//# sourceMappingURL=worker_render.js.map